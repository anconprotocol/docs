"use strict";(self.webpackChunkancon_docs=self.webpackChunkancon_docs||[]).push([[890],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2974:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={sidebar_position:1},c="Ancon Protocol Decentrallized Infrastructure",l={unversionedId:"tutorials/networks",id:"tutorials/networks",isDocsHomePage:!1,title:"Ancon Protocol Decentrallized Infrastructure",description:"Smart Contracts",source:"@site/docs/tutorials/networks.md",sourceDirName:"tutorials",slug:"/tutorials/networks",permalink:"/docs/tutorials/networks",editUrl:"https://github.com/anconprotocol/ancon-docs/docs/tutorials/networks.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Data Unions",permalink:"/docs/tutorials/data-unions"},next:{title:"EVM to EVM cross ownership",permalink:"/docs/tutorials/crossownership"}},u=[{value:"Smart Contracts",id:"smart-contracts",children:[],level:2},{value:"Networks",id:"networks",children:[],level:2},{value:"Nodes",id:"nodes",children:[],level:2},{value:"Relayers",id:"relayers",children:[],level:2}],d={toc:u};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ancon-protocol-decentrallized-infrastructure"},"Ancon Protocol Decentrallized Infrastructure"),(0,a.kt)("h2",{id:"smart-contracts"},"Smart Contracts"),(0,a.kt)("p",null,"Ancon Protocol is a smart contract that stores ICS23 Vector Commitments hashes (accumulators), verifies proofs from a network of nodes or single node in a DAG sync strategy or using Graphsync. The clients in this setup, query a node in the network and polls the smart contract for ",(0,a.kt)("inlineCode",{parentName:"p"},"HeaderUpdated")," events, in every emit a hash is submitted to the smart contract."),(0,a.kt)("p",null,"TODO Image"),(0,a.kt)("h2",{id:"networks"},"Networks"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"DAG Network")," is a node in single node or in a Graphsync network, which is register in Ancon Protocol contract. Every root hash or accumulator update is read from the node and pushed to the smart contract by the relayer."),(0,a.kt)("h2",{id:"nodes"},"Nodes"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Node")," is where both the merkle tree storage and DAG blocks are hosted. A Node is created with ",(0,a.kt)("inlineCode",{parentName:"p"},"ancond --moniker supernetwork --init"),", which creates a new set of keys and credentials given a moniker name."),(0,a.kt)("p",null,"These keys are used when creating a relayer connection."),(0,a.kt)("h2",{id:"relayers"},"Relayers"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Relay")," is a NestJS backend app which is configured with the addresses of ",(0,a.kt)("inlineCode",{parentName:"p"},"Ancon Protocol"),", an ERC20 token for payments, and a chain  id ."),(0,a.kt)("p",null,"Relayers can query either an anonymous last or  signed last hast request fom a node."))}p.isMDXComponent=!0}}]);