"use strict";(self.webpackChunkancon_docs=self.webpackChunkancon_docs||[]).push([[615],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||l[m]||i;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2801:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],c={sidebar_position:2},s="Onchain metadata",p={unversionedId:"api/metadata",id:"api/metadata",isDocsHomePage:!1,title:"Onchain metadata",description:"Solidity",source:"@site/docs/api/metadata.md",sourceDirName:"api",slug:"/api/metadata",permalink:"/docs/api/metadata",editUrl:"https://github.com/anconprotocol/docs/docs/api/metadata.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"API Reference",permalink:"/docs/api/reference"},next:{title:"Trusted offchain gateways",permalink:"/docs/api/durin"}},d=[{value:"Solidity",id:"solidity",children:[],level:2},{value:"Metadata JSON Schema",id:"metadata-json-schema",children:[{value:"Example",id:"example",children:[],level:3}],level:2}],l={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"onchain-metadata"},"Onchain metadata"),(0,i.kt)("h2",{id:"solidity"},"Solidity"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Ancon721Metadata{\n  string uri;\n  string parent;\n  string didOwner;\n}\n")),(0,i.kt)("h2",{id:"metadata-json-schema"},"Metadata JSON Schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://json-schema.org/draft/2020-12/schema",\n  "$id": "https://ancon.did.pa/v0/protocol/metadata",\n  "title": "metadata",\n  "description": "Ancon Protocol metadata schema",\n  "type": "object",\n  "properties": {\n      "name": {\n          "type": "string",\n          "description": "Identifies the asset to which this token represents",\n      },\n      "description": {\n          "type": "string",\n          "description": "Describes the asset to which this token represents",\n      },\n      "image": {\n          "type": "string",\n          "description": "A URI pointing to a resource with mime type image/* representing the asset to which this token represents.",\n      },\n      "sources": {\n          "type": "cid array",\n          "description": "Current intellectual property",\n      },\n      "owner": {\n          "type": "string",\n          "description": "The owner is a DID identifier",\n      },\n      "parent": {\n          "type": "cid",\n          "description": "Direct ascendant of the current intellectual property",\n      }\n  },\n  "required": [ "name", "description", "image", "sources" ]\n}\n')),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-JavaScript"},'\nconst payload = {\n  "name": "XDV metadata sample",\n  "description": "testing sample",\n  "image": "https://explore.ipld.io/#/explore/QmSnuWmxptJZdLJpKRarxBMS2Ju2oANVrgbr2xWbie9b2D",\n  "sources": [\n    "QmSnuWmxptJZdLJpKRarxBMS2Ju2oANVrgbr2xWbie9b2D",\n    "z8mWaJHXieAVxxLagBpdaNWFEBKVWmMiE",\n    "QmdmQXB2mzChmMeKY47C43LxUdg1NDJ5MWcKMKxDu7RgQm",\n  ],\n};\n\n\nconst res = await ancon.metadata.add(payload)\nconsole.log(`https://gateway.dao.pa/ancon/${res.cid}`)\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mint or anchor")," your Ancon metadata after its vetted by chain consensus protocol. The metadata is just a link to a gateway and always public."))}u.isMDXComponent=!0}}]);