"use strict";(self.webpackChunkancon_docs=self.webpackChunkancon_docs||[]).push([[615],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return u}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=d(t),u=r,h=m["".concat(s,".").concat(u)]||m[u]||p[u]||o;return t?a.createElement(h,i(i({ref:n},l),{},{components:t})):a.createElement(h,i({ref:n},l))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2801:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return l},default:function(){return m}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],c={sidebar_position:2},s="Onchain metadata and DAG blocks (Polygon SDK)",d={unversionedId:"api/metadata",id:"api/metadata",isDocsHomePage:!1,title:"Onchain metadata and DAG blocks (Polygon SDK)",description:"These onchain features are available in Ancon Protocol Chain powered by Polygon SDK. There are three post transaction hooks:",source:"@site/docs/api/metadata.md",sourceDirName:"api",slug:"/api/metadata",permalink:"/docs/api/metadata",editUrl:"https://github.com/anconprotocol/ancon-docs/docs/api/metadata.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"API Reference",permalink:"/docs/api/reference"},next:{title:"Trusted offchain gateways",permalink:"/docs/api/durin"}},l=[{value:"AddOnchainMetadata hook event",id:"addonchainmetadata-hook-event",children:[],level:2},{value:"EncodeDagJson hook event",id:"encodedagjson-hook-event",children:[],level:2},{value:"EncodeDagCbor hook event",id:"encodedagcbor-hook-event",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"Solidity",id:"solidity",children:[],level:3}],level:2},{value:"Metadata JSON Schema",id:"metadata-json-schema",children:[{value:"Example",id:"example",children:[],level:3}],level:2}],p={toc:l};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"onchain-metadata-and-dag-blocks-polygon-sdk"},"Onchain metadata and DAG blocks (Polygon SDK)"),(0,o.kt)("p",null,"These onchain features are available in Ancon Protocol Chain powered by Polygon SDK. There are three post transaction hooks:"),(0,o.kt)("h2",{id:"addonchainmetadata-hook-event"},"AddOnchainMetadata hook event"),(0,o.kt)("p",null,"Creates a dag-json block containing Ancon721Metadata payload. Emits a StoreDagBlockDone event."),(0,o.kt)("h2",{id:"encodedagjson-hook-event"},"EncodeDagJson hook event"),(0,o.kt)("p",null,"Creates a dag-json block containing json payload. Emits a StoreDagBlockDone event."),(0,o.kt)("h2",{id:"encodedagcbor-hook-event"},"EncodeDagCbor hook event"),(0,o.kt)("p",null,"Creates a dag-cbor block containing cbor payload. Emits a StoreDagBlockDone event."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"solidity"},"Solidity"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract OnchainMetadata {\n\n  event AddOnchainMetadata(\n    string name, \n    string description, \n    string indexed image, \n    string indexed owner, \n    string indexed parent, \n    bytes sources\n  );\n\n  event EncodeDagJson(\n    string path, \n    string hexdata\n  );\n\n  event EncodeDagCbor(\n    string path, \n    string hexdata\n  );\n\n  event StoreDagBlockDone(\n    string path, \n    string cid\n  );\n\n\n  constructor() {\n\n  }\n\n  function setOnchainMetadata(\n    string memory name, \n    string memory description, \n    string memory image, \n    string memory owner, \n    string memory parent, \n    bytes memory sources\n  ) public{\n    emit AddOnchainMetadata(name, description, image, owner, parent, sources);\n  }\n\n  function encodeDagjsonBlock(\n    string memory path,\n    string memory hexdata\n  ) public returns (bool) {\n\n    emit EncodeDagJson(path, hexdata);\n\n    return true;\n  }\n}\n\n")),(0,o.kt)("h2",{id:"metadata-json-schema"},"Metadata JSON Schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://json-schema.org/draft/2020-12/schema",\n  "$id": "https://ancon.did.pa/v0/protocol/metadata",\n  "title": "metadata",\n  "description": "Ancon Protocol metadata schema",\n  "type": "object",\n  "properties": {\n      "name": {\n          "type": "string",\n          "description": "Identifies the asset to which this token represents",\n      },\n      "description": {\n          "type": "string",\n          "description": "Describes the asset to which this token represents",\n      },\n      "image": {\n          "type": "string",\n          "description": "A URI pointing to a resource with mime type image/* representing the asset to which this token represents.",\n      },\n      "sources": {\n          "type": "cid array",\n          "description": "Current intellectual property",\n      },\n      "owner": {\n          "type": "string",\n          "description": "The owner is a DID identifier",\n      },\n      "parent": {\n          "type": "cid",\n          "description": "Direct ascendant of the current intellectual property",\n      }\n  },\n  "required": [ "name", "description", "image", "sources" ]\n}\n')),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JavaScript"},'\nconst payload = {\n  "name": "XDV metadata sample",\n  "description": "testing sample",\n  "image": "https://explore.ipld.io/#/explore/QmSnuWmxptJZdLJpKRarxBMS2Ju2oANVrgbr2xWbie9b2D",\n  "sources": [\n    "QmSnuWmxptJZdLJpKRarxBMS2Ju2oANVrgbr2xWbie9b2D",\n    "z8mWaJHXieAVxxLagBpdaNWFEBKVWmMiE",\n    "QmdmQXB2mzChmMeKY47C43LxUdg1NDJ5MWcKMKxDu7RgQm",\n  ],\n};\n\n\n')))}m.isMDXComponent=!0}}]);