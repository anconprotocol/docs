"use strict";(self.webpackChunkancon_docs=self.webpackChunkancon_docs||[]).push([[890],{2974:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),s=["components"],i={sidebar_position:1},c="Ancon Protocol Decentrallized Infrastructure",l={unversionedId:"tutorials/networks",id:"tutorials/networks",isDocsHomePage:!1,title:"Ancon Protocol Decentrallized Infrastructure",description:"Smart Contracts",source:"@site/docs/tutorials/networks.md",sourceDirName:"tutorials",slug:"/tutorials/networks",permalink:"/docs/tutorials/networks",editUrl:"https://github.com/anconprotocol/ancon-docs/docs/tutorials/networks.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Data Unions",permalink:"/docs/tutorials/data-unions"},next:{title:"EVM to EVM cross ownership",permalink:"/docs/tutorials/crossownership"}},d=[{value:"Smart Contracts",id:"smart-contracts",children:[],level:2},{value:"Networks",id:"networks",children:[],level:2},{value:"Nodes",id:"nodes",children:[],level:2},{value:"Relayers",id:"relayers",children:[],level:2}],u={toc:d};function p(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ancon-protocol-decentrallized-infrastructure"},"Ancon Protocol Decentrallized Infrastructure"),(0,a.kt)("h2",{id:"smart-contracts"},"Smart Contracts"),(0,a.kt)("p",null,"Ancon Protocol is a smart contract that stores ICS23 Vector Commitments hashes (accumulators), verifies proofs from a network of nodes or single node in a DAG sync strategy or using Graphsync. The clients in this setup, query a node in the network and polls the smart contract for ",(0,a.kt)("inlineCode",{parentName:"p"},"HeaderUpdated")," events, in every emit a hash is submitted to the smart contract."),(0,a.kt)("p",null,"TODO Image"),(0,a.kt)("h2",{id:"networks"},"Networks"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"DAG Network")," is a node in single node or in a Graphsync network, which is register in Ancon Protocol contract. Every root hash or accumulator update is read from the node and pushed to the smart contract by the relayer."),(0,a.kt)("h2",{id:"nodes"},"Nodes"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Node")," is where both the merkle tree storage and DAG blocks are hosted. A Node is created with ",(0,a.kt)("inlineCode",{parentName:"p"},"ancond --moniker supernetwork --init"),", which creates a new set of keys and credentials given a moniker name."),(0,a.kt)("p",null,"These keys are used when creating a relayer connection."),(0,a.kt)("h2",{id:"relayers"},"Relayers"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Relay")," is a NestJS backend app which is configured with the addresses of ",(0,a.kt)("inlineCode",{parentName:"p"},"Ancon Protocol"),", an ERC20 token for payments, and a chain  id ."),(0,a.kt)("p",null,"Relayers can query either an anonymous last or  signed last hast request fom a node."))}p.isMDXComponent=!0}}]);